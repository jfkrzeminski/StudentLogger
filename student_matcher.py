import csv
from datetime import datetime, timedelta

# Load student mappings from the CSV file generated by the logging program
today_date = datetime.now().strftime("%Y-%m-%d")
log_file = f'student_log_{today_date}.csv'  # Make sure the filename matches the logging program's output

def load_student_mappings():
    student_mappings = {}
    with open(log_file, mode='r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            custom_code = row["Custom Code"].strip()
            action = row['Action'].strip()
            timestamp = datetime.strptime(row['Timestamp'].strip(), "%Y-%m-%d %H:%M:%S.%f")
            if custom_code not in student_mappings:
                student_mappings[custom_code] = []
            student_mappings[custom_code].append({'action': action, 'timestamp': timestamp})

    return student_mappings

def match_custom_codes_with_names(student_mappings):
    student_names = {}
    for custom_code, actions in student_mappings.items():
        print(f"Custom Code: {custom_code}")
        student_name = input("Enter student name: ").strip()
        if student_name in student_names:
            student_names[student_name].extend(actions)
        else:
            student_names[student_name] = actions

    return student_names

def calculate_total_durations(student_names):
    student_durations = {}
    for student_name, actions in student_names.items():
        total_duration = timedelta()
        entry_timestamp = None
        timestamps = []

        for action in actions:
            if action['action'] == 'out':
                entry_timestamp = action['timestamp']
            elif action['action'] == 'in' and entry_timestamp:
                exit_timestamp = action['timestamp']
                duration = exit_timestamp - entry_timestamp
                total_duration += duration
                timestamps.append((entry_timestamp, exit_timestamp))
                entry_timestamp = None

        student_durations[student_name] = {'total_duration': total_duration, 'timestamps': timestamps}

    return student_durations

def save_to_csv(student_durations):
    output_file = f'student_durations_{today_date}.csv'
    with open(output_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Student Name', 'Time Out', 'Time In', 'Total Time Out of Classroom'])
        for student_name, data in sorted(student_durations.items()):
            total_duration = data['total_duration']
            for entry_timestamp, exit_timestamp in data['timestamps']:
                writer.writerow([student_name, entry_timestamp, exit_timestamp, total_duration])

def print_student_details(student_durations):
    print("\nMatched Students with Entry/Exit Details and Total Duration:")
    for student_name, data in sorted(student_durations.items()):
        total_duration = data['total_duration']
        print(f"Student Name: {student_name}")
        for entry_timestamp, exit_timestamp in data['timestamps']:
            print(f"  Time Out: {entry_timestamp}")
            print(f"  Time In: {exit_timestamp}")
        print(f"Total Duration: {total_duration}\n")

def main():
    student_mappings = load_student_mappings()
    student_names = match_custom_codes_with_names(student_mappings)
    student_durations = calculate_total_durations(student_names)
    save_to_csv(student_durations)
    print_student_details(student_durations)
    print(f"\nStudent durations saved to 'student_durations_{today_date}.csv'.")

if __name__ == "__main__":
    main()
